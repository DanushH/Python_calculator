# -*- coding: utf-8 -*-
"""calc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19kWKhdcA5ch0cq6_b1ywr3ID5KSTvOm_
"""

import math
import sympy
from sympy import symbols
from sympy.solvers import solve


def calculate_basics(operator, n1, n2):
    if operator == '+':
        return f'{n1} + {n2} = {n1 + n2}'
    elif operator == '-':
        return f'{n1} - {n2} = {n1 - n2}'
    elif operator == '*':
        return f'{n1} * {n2} = {n1 * n2}'
    elif operator == '/':
        n1, n2 = float(n1), float(n2)
        quotient = round((n1 / n2), 2)
        return f'{n1} / {n2} = {quotient}'


def detect_prime(number):
    if number == 2:
        return "2 is a prime number"

    prime_or_comp = "prime"

    for test_number in range(2, number):
        if number % test_number == 0:
            prime_or_comp = "composite"

    return f'{number} is a {prime_or_comp} number'


def calculate_prime_factors(number):
    num = number
    arr = []

    while number % 2 == 0:
        arr.append(2)
        number = int(number / 2)

    for i in range(3, int(math.sqrt(number))+1, 2):
        while number % i== 0:
            arr.append(i),
            number = number / i

    if number > 2:
        arr.append(number)

    st = ', '.join(str(x) for x in arr)

    return f'Prime factors of {num} are {st}'


def factor_square_root(n):
    upper_limit = math.floor(math.sqrt(n)) + 1
    max_factor = 1
    other_factor = 1
    square_root = 1

    for maybe_factor in range(1, upper_limit):
        if n % (maybe_factor**2) == 0:
            max_factor = maybe_factor**2

    other_factor = n/max_factor

    square_root = int(math.sqrt(max_factor))
    other_factor = int(other_factor)
    output = square_root*sympy.sqrt(other_factor)

    return f'factor of square root({int(n)}) = {output}'


def solve_x(eq):
    x = symbols('x')
    return f'x = {solve(eq,x)[0]}'

def menu():
    print("1 Add,subtract,multiply,divide \n2 Detect prime numbers \n3 Generate prime factors of a number \n4 Simplify square roots \n5 Solve for a variable")
    option = int(input("\nSelect option number: "))

    if option == 1:
        op = input('Enter operator: ')
        first = int(input('Enter first number: '))
        second = int(input('Enter second number: '))
        answer = calculate_basics(op, first, second)
        print(answer)

    elif option == 2:
        number = int(input('Enter a positive integer: '))
        answer = detect_prime(number)
        print(answer)

    elif option == 3:
        number = int(input('Enter a positive integer: '))
        answer = calculate_prime_factors(number)
        print(answer)

    elif option == 4:
        number = float(input('Enter a number: '))
        answer = factor_square_root(number)
        print(answer)

    elif option == 5:
        eq = input('Enter an equation to solve for x: 0 = ')
        answer = solve_x(eq)
        print(answer)

    ans = input("\nDo you wish to continue? Enter Y for yes, N for no. \n")
    ans = ans.lower()
    while (ans == 'y'):
        menu()
    if ans == 'n':
        print("Exit")

menu()